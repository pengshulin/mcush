from VEnvironment import *

RTOS = getEnv('RTOS', 'FREERTOS')
if RTOS == 'POSIX':
    haldir = 'posix'
else:
    haldir = getEnv('HALDIR', 'stm32f103c8_xtw')

#env = loadHalConfig( haldir ).env
env = loadHalConfig( haldir, append_rtos=RTOS ).env
#env = loadHalConfig( haldir, append_rtos=RTOS, use_shell=False ).env
#env = loadHalConfig( haldir, use_vcp=True ).env
#env = loadHalConfig( haldir, use_vcp=False ).env
#env = loadHalConfig( haldir, use_spiffs=True ).env
#env = loadHalConfig( haldir, use_spiffs=True, use_fatfs=True ).env
#env = loadHalConfig( haldir, use_vfs=False ).env
#env = loadHalConfig( haldir, use_hal_driver=True ).env
#env = loadHalConfig( haldir, use_hal_driver=True, use_vcp=True ).env
#env = loadHalConfig( haldir, use_hal_driver=True, use_vcp=False ).env
#env = loadHalConfig( haldir, use_hal_driver=True, use_vcp=True, use_spiffs=True ).env
#env = loadHalConfig( haldir, use_hal_driver=True, use_vcp=False, use_spiffs=True ).env
#env = loadHalConfig( haldir, use_hal_driver=False ).env
#env = loadHalConfig( haldir, use_hal_driver=False, use_vcp=False ).env
#env = loadHalConfig( haldir, use_hal_driver=False, use_vcp=False, use_spiffs=True ).env

env.appendDefineFlags( [
    ] ) 

env.appendPath([
    '.',
])

env.appendGlobSource([
    '*.c',
])

if not env.DEBUG:
    env.appendDefineFlags( [ 'HAL_WDG_ENABLE=1' ] ) 

env.makeApp()

